name: CI/CD

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build Blogtify.sln --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish Blogtify/Blogtify/Blogtify.csproj -c Release -o ./publish
        shell: pwsh

      - name: Deploy with MSDeploy
        shell: pwsh
        run: |
          $publishUrl = "${{ secrets.PUBLISH_URL }}" 
          $siteName   = "${{ secrets.SITE_NAME }}"
          $username   = "${{ secrets.USERNAME }}"
          $password   = "${{ secrets.PASSWORD }}"
          $publishFolder = "${{ github.workspace }}\publish"

          # Debug: Print secret values (masked for security)
          Write-Output "PUBLISH_URL from secrets: ${{ secrets.PUBLISH_URL }}"
          Write-Output "SITE_NAME from secrets: ${{ secrets.SITE_NAME }}"
          Write-Output "USERNAME from secrets: ${{ secrets.USERNAME }}"
          Write-Output "PASSWORD from secrets: ${{ secrets.PASSWORD }}"

          # Validate secrets
          if (-not $publishUrl -or $publishUrl -eq "") { throw "Error: PUBLISH_URL secret is not set, empty, or invalid. Should be site36496.siteasp.net" }
          if (-not $siteName -or $siteName -eq "") { throw "Error: SITE_NAME secret is not set, empty, or invalid" }
          if (-not $username -or $username -eq "") { throw "Error: USERNAME secret is not set, empty, or invalid" }
          if (-not $password -or $password -eq "") { throw "Error: PASSWORD secret is not set, empty, or invalid" }

          echo "Deploying to $publishUrl, site=$siteName"

          $publishFolder = $publishFolder -replace '\\', '/'

          $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          $arguments = @(
            "-source:contentPath=`"$publishFolder`"",
            "-dest:contentPath=`"$siteName`",
                    computerName=`"https://$publishUrl:8172/msdeploy.axd?site=$siteName`",
                    userName=`"$username`",
                    password=`"$password`",
                    authType=Basic,
                    includeAcls=False",
            "-verb:sync",
            "-enableRule:DoNotDeleteRule",
            "-verbose"
          )


          # Debug: Print arguments
          Write-Output "MSDeploy Arguments:"
          $arguments | ForEach-Object { Write-Output $_ }

          # Execute MSDeploy with Start-Process
          Start-Process -FilePath $msdeploy -ArgumentList $arguments -NoNewWindow -Wait -RedirectStandardOutput "msdeploy_output.txt" -RedirectStandardError "msdeploy_error.txt"

          # Output logs for debugging
          Write-Output "MSDeploy Output:"
          Get-Content "msdeploy_output.txt"
          Write-Output "MSDeploy Errors:"
          Get-Content "msdeploy_error.txt"
