@using Blogtify.Client.Models
@using System.Reflection
@using Blogtify.Client.Theming

@inject NavigationManager NavigationManager

@inject IThemeProvider ThemeProvider

<div class="row align-items-center">
    <div class="col-3 col-md-5">
        <a href="/">
            <img src="logo.png" alt="SymphoniX" style="width: 80px" />
        </a>
    </div>
    <div class="col-6 col-md-4">
        <HxSearchBox DataProvider="ProvideSearchResults"
                     TItem="PostDto" InputSize="InputSize.Regular"
                     ItemTitleSelector="i => i.Title" MinimumLength="1"
                     Placeholder="Tìm kiếm bài viết..."
                     OnItemSelected="OnItemSelected" AllowTextQuery="@matched.Any()"
                     OnTextQueryTriggered="OnTextQueryTriggered">
            <DefaultContentTemplate>
                <div class="p-2 text-muted">Nhập tiêu đề bài viết để tìm...</div>
            </DefaultContentTemplate>
            <NotFoundTemplate>
                <div class="small py-2 px-3 text-muted">
                    <HxIcon CssClass="me-2" Icon="BootstrapIcon.EmojiFrown" />
                    Không tìm thấy bài viết nào...
                </div>
            </NotFoundTemplate>
        </HxSearchBox>
    </div>

    <div class="col-3 col-md-2">
        <HxSelect Data="@Enum.GetNames(typeof(Theme))" ValueExpression="() => selectedTheme"
                  Nullable="false" AutoSort="true"
                  Value="@selectedTheme" ValueChanged="@((string theme) => ChangeTheme(theme))">
        </HxSelect>
    </div>

</div>

@code {
    private string selectedTheme = "Yeti";

    private List<PostDto> matched = [];

    protected override void OnInitialized()
    {
        selectedTheme = ThemeProvider.GetTheme().ToString();
        ChangeTheme(selectedTheme);
    }

    private Task<SearchBoxDataProviderResult<PostDto>> ProvideSearchResults(SearchBoxDataProviderRequest request)
    {
        var query = request.UserInput?.Trim() ?? "";

        matched = AppDataManager.GetPosts(1, Constants.SearchPageSize, query, []);
        StateHasChanged();

        return Task.FromResult(new SearchBoxDataProviderResult<PostDto>
        {
            Data = matched
        });
    }

    private void OnItemSelected(PostDto item)
    {
        NavigationManager.NavigateTo(item.Route);
    }

    private void OnTextQueryTriggered(string text)
    {
        NavigationManager.NavigateTo($"?Query={text}&Page=1", forceLoad: true);
    }

    private void ChangeTheme(string theme)
    {
        selectedTheme = theme;

        var themeEnum = Enum.Parse<Theme>(theme);
        ThemeProvider.SetTheme(themeEnum);
    }

}