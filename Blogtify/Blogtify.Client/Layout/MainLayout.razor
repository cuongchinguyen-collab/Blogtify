@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container-fluid">

    <!-- AppBar -->
    <div class="position-fixed top-0 start-0 w-100 d-flex align-items-center py-1 px-2 appbar-container"
         style="z-index: 100; background: rgba(250,250,250,0.95)">
        <!-- toggle sidebar -->
        <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Regular"
                  OnClick="() => offcanvasComponent.ShowAsync()" Icon="@BootstrapIcon.List"
                  CssClass="me-2 d-lg-none">
        </HxButton>

        <div class="flex-grow-1">
            <AppBar />
        </div>
    </div>

    <div class="pt-5 px-0">
        <div class="row pt-4 mt-4">

            <!-- Sidebar desktop -->
            <div class="col-lg-2 p-0 d-none d-lg-block">
                <div class="sidebar desktop">
                    <HxTreeView Items="@sidebarItems"
                                ItemInitialExpandedSelector="@(p => p.Children.Any())"
                                ItemTitleSelector="item => item.Text"
                                ItemIconSelector="item => item.Icon"
                                ItemCssClass="py-2 fs-6"
                                SelectedItemChanged="@((SidebarItem item) => OnSelectedItemChanged(item))"
                                ItemChildrenSelector="item => item.Children">
                    </HxTreeView>
                </div>
            </div>

            <!-- Sidebar mobile -->
            <HxOffcanvas Placement="OffcanvasPlacement.Start" @ref="offcanvasComponent" Size="OffcanvasSize.Small">
                <BodyTemplate>
                    <div class="sidebar">
                        <HxTreeView Items="@sidebarItems"
                                    ItemInitialExpandedSelector="@(p => p.Children.Any())"
                                    ItemTitleSelector="item => item.Text"
                                    ItemIconSelector="item => item.Icon"
                                    ItemCssClass="py-2 fs-6"
                                    SelectedItemChanged="@((SidebarItem item) => OnSelectedItemChanged(item))"
                                    ItemChildrenSelector="item => item.Children">
                        </HxTreeView>
                    </div>
                </BodyTemplate>
            </HxOffcanvas>

            <!-- Main body -->
            <div class="col-lg-10 ps-1 main-content">
                @Body
            </div>
        </div>

        <div class="my-2">
            <Footer />
        </div>
    </div>

    <SettingsButton />
    <BackToTopButton />
</div>

@code {
    private SidebarItem[] sidebarItems = [];
    private HxOffcanvas offcanvasComponent = new();

    protected override void OnInitialized()
    {
        var categories = AppDataManager.AllCategories.Where(c => c.Parent == null);

        var root = new SidebarItem("Thể loại", BootstrapIcon.Hdd);

        if (categories.Any())
        {
            root.Children = categories.Select(BuildSidebarItem).ToArray();
        }

        sidebarItems = [root];
    }

    private SidebarItem BuildSidebarItem(CategoryDto category)
    {
        var item = new SidebarItem(
            text: category.Name,
            icon: category.GetSubCategories().Any() ? BootstrapIcon.Hdd : BootstrapIcon.FileEarmark,
            href: $"?categories={category.Name}",
            hint: category.Name
        );

        var children = category.GetSubCategories();
        if (children.Any())
        {
            item.Children = children.Select(BuildSidebarItem).ToArray();
        }

        return item;
    }

    private async Task OnSelectedItemChanged(SidebarItem item)
    {
        if (!string.IsNullOrEmpty(item.Href))
        {
            NavigationManager.NavigateTo(item.Href);
        }

        if (offcanvasComponent != null)
        {
            await offcanvasComponent.HideAsync();
        }

        StateHasChanged();
    }

    public class SidebarItem
    {
        public SidebarItem(string text, IconBase? icon = null, string? href = null, string? hint = null)
        {
            Text = text;
            Icon = icon;
            Href = href;
            Hint = hint;
        }

        public string Text { get; }
        public string? Href { get; }
        public IconBase? Icon { get; }
        public string? Hint { get; }
        public SidebarItem[] Children { get; set; } = [];
    }
}
