@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container-fluid">

    <div class="position-fixed top-0 start-0 w-100 d-flex align-items-center py-1 px-2 appbar-container"
         style="z-index: 100; background: rgba(250,250,250,0.95)">
        <div class="flex-grow-1">
            <AppBar />
        </div>
    </div>

    <div class="pt-5 px-0">
        <div class="row pt-4 mt-4 mx-2">
            <!-- Sidebar -->
            <div class="col-lg-2 p-0 d-none d-lg-block">
                <div class="sidebar">
                    <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Regular" OnClick="() => Collapsed = !Collapsed">
                        <HxIcon Icon="@(Collapsed? BootstrapIcon.List: BootstrapIcon.X)" />
                    </HxButton>
                    <HxSidebar @bind-Collapsed="Collapsed">
                        <ItemsTemplate>
                            @foreach (var item in sidebarItems)
                            {
                                @RenderSidebarItem(item)
                            }
                        </ItemsTemplate>
                    </HxSidebar>
                </div>
            </div>

            <!-- Body -->
            <div class="col-lg-10 ps-1 main-content">
                @Body
            </div>
        </div>

        <div class="my-2">
            <Footer />
        </div>
    </div>

    <BackToTopButton />
</div>

@code {
    private SidebarItem[] sidebarItems = [];
    private bool Collapsed = false;

    protected override void OnInitialized()
    {
        var categories = AppDataManager.AllCategories.Where(c => c.Parent == null);

        var root = new SidebarItem("Thể loại", BootstrapIcon.Hdd);

        if (categories.Any())
        {
            root.Children = categories.Select(BuildSidebarItem).ToArray();
        }

        sidebarItems = [root];
    }

    private SidebarItem BuildSidebarItem(CategoryDto category)
    {
        var item = new SidebarItem(
            text: category.Name,
            icon: category.GetSubCategories().Any() ? BootstrapIcon.Hdd : BootstrapIcon.FileEarmark,
            href: category.GetSubCategories().Any() ? null : $"?categories={category.Name}",
            hint: category.Name
        );

        var children = category.GetSubCategories();
        if (children.Any())
        {
            item.Children = children.Select(BuildSidebarItem).ToArray();
        }

        return item;
    }

    private RenderFragment RenderSidebarItem(SidebarItem item, int level = 0) => builder =>
    {
        builder.OpenComponent<HxSidebarItem>(0);

        builder.AddAttribute(1, "Icon", item.Icon);

        if (!string.IsNullOrEmpty(item.Href))
        {
            builder.AddAttribute(2, "Href", item.Href);
        }

        builder.AddAttribute(3, "ContentTemplate",
            (RenderFragment<SidebarItemContentTemplateContext>)(context => contentBuilder =>
            {
                contentBuilder.AddContent(4, item.Text);

                if (item.Children?.Any() == true)
                {
                    contentBuilder.OpenComponent<HxBadge>(5);
                    contentBuilder.AddAttribute(6, "Color", ThemeColor.Primary);
                    contentBuilder.AddAttribute(7, "CssClass", "ms-2");
                    contentBuilder.AddContent(8, item.Children.Count());
                    contentBuilder.CloseComponent();
                }
            }));

        if (item.Children?.Any() == true)
        {
            builder.AddAttribute(9, "ChildContent", (RenderFragment)(childBuilder =>
            {
                foreach (var child in item.Children)
                {
                    childBuilder.AddContent(10, RenderSidebarItem(child, level + 1));
                }
            }));
        }

        builder.AddAttribute(11, "CssClass", $"sidebar-level-{level}");
        builder.CloseComponent();
    };

    public class SidebarItem
    {
        public SidebarItem(string text, IconBase? icon = null, string? href = null, string? hint = null)
        {
            Text = text;
            Icon = icon;
            Href = href;
            Hint = hint;
        }

        public string Text { get; }
        public string? Href { get; }
        public IconBase? Icon { get; }
        public string? Hint { get; }
        public SidebarItem[] Children { get; set; } = [];
    }
}

